import { useEffect, useRef } from 'react';

/**
 * –•—É–∫ –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –∑–º—ñ–Ω –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç–µ–π –ø–æ–ª–æ—Ç–Ω–∞ —Ç–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó
 */
export const useCanvasPropertiesTracker = (canvas, globalColors, saveCanvasPropertiesState, toolbarState = {}) => {
  const previousValuesRef = useRef({});
  const isInitializedRef = useRef(false);
  const timeoutRef = useRef(null);

  // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –±–µ–∑–ø–µ—á–Ω–æ–≥–æ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∑ –¥–µ–±–∞—É–Ω—Å–æ–º
  const debouncedSave = (description) => {
    if (timeoutRef.current) {
      clearTimeout(timeoutRef.current);
    }
    
    timeoutRef.current = setTimeout(() => {
      if (saveCanvasPropertiesState) {
        console.log('üé® Saving state:', description);
        saveCanvasPropertiesState(description);
      }
    }, 100);
  };

  // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –Ω–µ–≥–∞–π–Ω–æ–≥–æ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è (–∫—Ä–∏—Ç–∏—á–Ω—ñ –∑–º—ñ–Ω–∏)
  const immediateSave = (description) => {
    if (timeoutRef.current) {
      clearTimeout(timeoutRef.current);
    }
    
    if (saveCanvasPropertiesState) {
      console.log('üé® Immediate save:', description);
      saveCanvasPropertiesState(description);
    }
  };

  // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø–æ—á–∞—Ç–∫–æ–≤–∏—Ö –∑–Ω–∞—á–µ–Ω—å
  useEffect(() => {
    if (!canvas) return;

    if (!isInitializedRef.current) {
      // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –≤—Å—ñ –ø–æ—á–∞—Ç–∫–æ–≤—ñ –∑–Ω–∞—á–µ–Ω–Ω—è
      previousValuesRef.current = {
        width: canvas.width,
        height: canvas.height,
        shapeType: toolbarState.currentShapeType || canvas.currentShapeType,
        cornerRadius: toolbarState.cornerRadius || canvas.cornerRadius || 0,
        thickness: toolbarState.thickness,
        holesType: toolbarState.activeHolesType,
        holesDiameter: toolbarState.holesDiameter,
        hasBorder: toolbarState.hasBorder || false,
        backgroundColor: globalColors?.backgroundColor,
        textColor: globalColors?.textColor,
        backgroundType: globalColors?.backgroundType
      };

      console.log('üîß Canvas properties tracker initialized');
      isInitializedRef.current = true;
    }
  }, [canvas, globalColors, toolbarState]);

  // –û—á–∏—â–µ–Ω–Ω—è –ø—Ä–∏ –¥–µ–º–æ–Ω—Ç–∞–∂—ñ
  useEffect(() => {
    return () => {
      if (timeoutRef.current) {
        clearTimeout(timeoutRef.current);
      }
    };
  }, []);

  // –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è —Å–ø–µ—Ü–∏—Ñ—ñ—á–Ω–∏—Ö –∑–º—ñ–Ω
  const trackCanvasResize = (newWidth, newHeight) => {
    if (!canvas) return;
    
    console.log('üìê Manual canvas resize tracking:', { width: newWidth, height: newHeight });
    immediateSave(`Canvas resized to ${newWidth}x${newHeight}`);
    
    previousValuesRef.current.width = newWidth;
    previousValuesRef.current.height = newHeight;
  };

  const trackViewportChange = () => {
    if (!canvas) return;
    
    debouncedSave('Viewport changed');
  };

  const trackShapeChange = (shapeType) => {
    if (!canvas) return;
    
    console.log('üî∑ Manual shape change tracking:', shapeType);
    immediateSave(`Canvas shape changed to ${shapeType}`);
    
    previousValuesRef.current.shapeType = shapeType;
  };

  const trackElementAdded = (elementType) => {
    if (!canvas) return;
    
    console.log('‚ûï Element added:', elementType);
    immediateSave(`${elementType} added`);
  };

  const trackColorThemeChange = (changes) => {
    if (!canvas) return;
    
    console.log('üé® Color theme changed:', changes);
    immediateSave('Color theme changed');
  };

  const trackThicknessChange = (newThickness) => {
    if (!canvas) return;
    
    console.log('üìè Thickness changed:', newThickness);
    immediateSave(`Thickness changed to ${newThickness}mm`);
  };

  const trackHolesChange = (holesType, diameter) => {
    if (!canvas) return;
    
    console.log('üï≥Ô∏è Holes changed:', { type: holesType, diameter });
    immediateSave(`Holes changed: type ${holesType}, diameter ${diameter}mm`);
  };

  const trackBorderChange = (hasBorder) => {
    if (!canvas) return;
    
    console.log('üñºÔ∏è Border changed:', hasBorder);
    immediateSave(`Border ${hasBorder ? 'added' : 'removed'}`);
  };

  return {
    trackCanvasResize,
    trackViewportChange,
    trackShapeChange,
    trackElementAdded,
    trackColorThemeChange,
    trackThicknessChange,
    trackHolesChange,
    trackBorderChange,
    immediateSave,
    debouncedSave
  };
};
